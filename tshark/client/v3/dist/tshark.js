function TShark(){ this.clickevent = 'click'; this._tmp_ = {}; this.modulos = {}; this.modulos._add = function(id, mod){ tshark._tmp_[id] = mod; }; this.bounded = {};
}
var CONSOLE_ON = true;
(function() { TShark.prototype.init = function (options) { options = options || {}; var d = $("<div>", { id: '_direct_api_helper_', class: "ui hidden" }).api(this.api); $('body') .append(d); if(options['register']){ this.register(options['register']); } var id = '.app' , obj = app ; if (options['bind']){ if (typeof options['bind'] == 'string') { this.bind(options['bind'], obj); } else { for (var o in options['bind']){ this.bind(o, options['bind'][o]); } } } else { this.bind(id, obj); } }; TShark.prototype.initIntf = function (ref) { if (!ref) { ref = 'body'; } else { if (typeof ref == 'string') { ref = (ref ? ref + ' ' : ''); if (ref && (ref[0] != '#' && ref[0] != '.')) { ref = "#" + ref; } ref = $(ref); } } $(ref).find('[data-action]').not('.api-binded') .api(this.api) .addClass('api-binded'); $(ref).find('.ui.dropdown').not('.binded') .dropdown({ onChange: function(value, text, $choice){ var dts = $(this).data('set'); if (dts){ dts = tshark.getObjPath(window, dts); if (dts){ dts.goTo(value); } } var _onChange = $(this).attr('on-change'); if (_onChange){ var obj = false; if (typeof window[_onChange] == 'function'){ obj = window; } else if (dts){ if (typeof dts[_onChange] == 'function'){ obj = dts; } else if (dts.ref && typeof dts.ref[_onChange] == 'function'){ obj = dts.ref; } } if (obj){ obj[_onChange].call(this, value, text, $choice) } } } }) .addClass('binded') ; $(ref).find('.ui.menu.item').not('.binded') .state() .addClass('binded') ; $(ref).find('.ui.checkbox').not('.binded') .checkbox() .addClass('binded') ; $(ref).find('.ui.accordion.non-exclusive').not('.binded') .accordion({ exclusive: false }) .addClass('binded') ; $(ref).find('.ui.accordion').not('.binded') .accordion() .addClass('binded') ; $(ref).find('[data-help]').not('.binded') .each(function(){ $(this).attr('data-content', $(this).data('help')); }) .popup() .addClass('binded') ; $(ref).find('[data-content]').not('.binded') .popup() .addClass('binded') ; $(ref).find('.ui.sticky').not('.binded') .sticky({ offset: 90, bottomOffset: 5 }) .addClass('binded') ; $(ref).find('.special.cards .image').not('.binded') .addClass('binded') .dimmer({ on: 'hover' }) ; }; TShark.prototype.resetIntf = function (ref) { if (!ref) { ref = 'body'; } else { if (typeof ref == 'string') { ref = (ref ? ref + ' ' : ''); if (ref && (ref[0] != '#' && ref[0] != '.')) { ref = "#" + ref; } ref = $(ref); } } $(ref).find('.binded') .removeClass('binded numpader-binded') ; }; TShark.prototype.bind = function(ref, obj, replace) { var id = ref || 'body'; if (!this.bounded[id] || !this.bounded[id].bound) { this.bounded[id] = {bound: false, html: $(id).html()}; if (replace) { var container = (typeof replace == 'string' ? id : $(id).find(replace[0]) ); $(container) .empty() .append($( (typeof replace == 'string' ? replace : replace[1] ) )); } this.bounded[id].bound = rivets.bind($(id), obj); tshark.initIntf(ref); return this.bounded[id]; } }; TShark.prototype.rebind = function(ref, obj, replace) { var id = ref || 'body'; if (this.bounded[id]) { this.bounded[id].bound.unbind(); this.bounded[id].bound = false; $(id).html(this.bounded[id].html); } return this.bind(ref, obj, replace); }; TShark.prototype.resetBind = function(ref, obj, replace){ var id = ref || 'body'; if (this.bounded[id]) { $(id).html(this.bounded[id].html); } return this.rebind(ref, obj, replace); }; TShark.prototype.unbind = function(ref, reset) { var id = ref || 'body'; if (this.bounded[id]) { this.bounded[id].bound.unbind(); this.bounded[id].bound = false; if (reset) { $(id).html(this.bounded[id].html); } } }; function normalizeAPI(api) { switch (typeof api) { case 'string': api = api.split('.'); break; case 'object': api = [api[0], api[1], api[2]]; break; } return api; } TShark.prototype.getMod = function (path) { if (typeof path != 'string'){ path = path.join('.'); } return this.modulos[path]; }; TShark.prototype.isRegistered = function (path) { return (this.modulos[path] ? true : false); }; TShark.prototype.register = function (paths, callFunc) { if (typeof paths == 'string'){ paths = [paths]; } paths.forEach(id => { var obj = this.modulos[id]; if (!obj || !obj['data']) { var path = id.split('.') , mod = path.pop() , arq = "modulos/" + path.join('/') + '/' + mod + '/' + mod + ".js" ; $.getScript(arq) .done(function (data, textStatus) { tshark.initMod(id); if (callFunc) { callFunc.call(tshark.modulos[id]); } }) .fail(function (jqxhr, settings, exception) { }) ; } }); }; TShark.prototype.initMod = function (ref) { var path = ''; if (typeof ref == 'string') { path = ref; ref = tshark._tmp_[ref]; delete(tshark._tmp_[ref]); } var extra_extend = (ref && ref.extends && window[ref.extends] ? window[ref.extends] : {}); var mod = $.extend( new tshark.modulo(path), extra_extend, ref || {} ); tshark.modulos[path] = mod; var obj = window , tmp = path.split('.') ; tmp.forEach((p, i) => { if (!obj[p]){ obj[p] = (i == tmp.length-1 ? tshark.modulos[path] : {} ); } obj = obj[p]; }); obj = app; tmp.forEach((p, i) => { if (!obj[p]){ obj[p] = (i == tmp.length-1 ? tshark.modulos[path] : {} ); } obj = obj[p]; }); if (mod['init']) { mod.init(); } return mod; }; TShark.prototype.assurePath = (obj, path, final_obj) => { var criou = false; path.forEach((p) => { if (!obj[p]){ criou = true; obj[p] = {}; } obj = obj[p]; }); if (criou && final_obj) { obj = final_obj; } return criou; }; TShark.prototype.getObjPath = (base, path) => { var obj = base; if (typeof path == 'string'){ path = path.split('.'); } path.forEach((p) => { obj = obj[p]; }); return obj; }; function notify(tipo, msg, extra, onOk){ alertify.notify( msg, tipo, 5, onOk ); if (extra){ alertify.notify( extra, tipo ); } } function log(msg, extra){ if (console) { console.log(msg, extra); if (extra) { console.log(msg, extra); } } } function popAlert(title, msg, extra, onOk){ alertify.alert(title, msg + (extra ? '<p>&nbsp;</p><p>' + extra : ''), onOk); } TShark.prototype.log = function(msg, extra){ log(msg, extra); }; TShark.prototype.erro = function(msg, extra, onOk){ notify('error', msg, extra, onOk); return false; }; TShark.prototype.sucesso = function(msg, extra, onOk){ notify('success', msg, extra, onOk); return true; }; TShark.prototype.alerta = function(msg, extra, onOk){ notify('warning', msg, extra, onOk); }; TShark.prototype.msg = function(msg, extra, onOk){ notify('', msg, extra, onOk); }; TShark.prototype.popErro = function(msg, extra, onOk){ popAlert('Erro!', msg, extra, onOk); return false; }; TShark.prototype.popSucesso = function(msg, extra, onOk){ popAlert('Sucesso!', msg, extra, onOk); return true; }; TShark.prototype.popAlerta = function(msg, extra, onOk){ popAlert('Alerta!', msg, extra, onOk); }; TShark.prototype.popMsg = function(msg, extra, onOk){ popAlert('Atenção!', msg, extra, onOk); }; TShark.prototype.confirm = function(msg, onOk, onCancel){ alertify .confirm('Atenção!', msg, onOk, onCancel) .set('labels', {cancel: 'Cancelar'}) ; }; TShark.prototype.prompt = function(msg, defValue, onOk, onCancel){ alertify .prompt('Informe:', msg, defValue, onOk, onCancel) .set('labels', {cancel: 'Cancelar'}) ; };
})($);